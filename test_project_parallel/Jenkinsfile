import groovy.json.JsonOutput

def artifactory_name = "Artifactory Docker"
def artifactory_repo = "conan-local"
def config_url = "https://github.com/demo-ci-conan/settings.git"
def remoteName = "artifactory-local"

def post_status(state) {
    def context = "conan-ci/projects - ${params.project_id} - ${params.reference}"
    def description = "Build for '${params.reference}' done!"
    def target_url = "https://my.url"

    withCredentials([usernamePassword(credentialsId: 'github-user-token', passwordVariable: 'pass', usernameVariable: 'user')]) {
        def url = "https://api.github.com/repos/${params.organization}/${params.repository}/statuses/${params.sha1}?access_token=$pass"
        def payload = JsonOutput.toJson(["state": state, "context": context, "description": description, "target_url": target_url])
        def response = sh(returnStdout: true, script: "curl -v -H \"Accept: application/json\" -H \"Content-type: application/json\" -X POST -d '${payload}' ${url}").trim()
    }
}

def build_ref_with_lockfile(job_reference, lockfile, profile, config_url, artifactory_name, remoteName, artifactory_repo) {
    return {
        node {
            docker.image("conanio/gcc8").inside("--net=docker_jenkins_artifactory") {
                try {
                    def server = Artifactory.server artifactory_name
                    def client = Artifactory.newConanClient()
                    
                    client.run(command: "config install ${config_url}".toString())
                    client.run(command: "config install -sf hooks -tf hooks https://github.com/conan-io/hooks.git")
                    client.remote.add server: server, repo: artifactory_repo, remoteName: remoteName, force: true

                    def actual_reference_name = job_reference.split("/")[0]
                    def recipe_reference_with_revision = job_reference.split(":")[0]
                    def actual_reference = job_reference.split("#")[0]

                    stage("Build ${actual_reference_name}") {
                        unstash actual_reference_name

                        sh "cat ${actual_reference_name}.lock"
                        sh "cp ${actual_reference_name}.lock conan.lock"  // TODO: Have a look to this rename, shouldn't be needed
                        client.run(command: "install ${recipe_reference_with_revision} --build ${actual_reference} --lockfile conan.lock --profile ${profile}".toString())
                        sh "cp conan.lock ${actual_reference_name}.lock"
                        sh "cat ${actual_reference_name}.lock"
                        stash name: actual_reference_name, includes: "${actual_reference_name}.lock"
                    }

                    stage("Upload packages") {
                        String uploadCommand = "upload ${actual_reference} --all -r ${remoteName} --confirm"
                        client.run(command: uploadCommand)  // TODO: Better if we share the cache for these jobs... shouldn't have race conditions.
                    }
                }
                finally {
                    deleteDir()
                }
            }
        }
    }
}


node {
    try {
        post_status("pending")

        stage('Build information') {
            echo "Building project '${params.project_id}'"
            echo " - for changes in '${params.reference}'"
        }
        
        def profile = "conanio-gcc8"
        def lockfile = "conan.lock"

        stage('Dynamic node') {
            docker.image("conanio/gcc8").inside("--net=docker_jenkins_artifactory") {
                echo "Inside the docker"
                withEnv(["CONAN_USER_HOME=${env.WORKSPACE}/conan_home"]) {
                    echo "Create a Conan client (CONAN_USER_HOME: '${env.WORKSPACE}/conan_home')".toString()
                    def server = Artifactory.server artifactory_name
                    def client = Artifactory.newConanClient(userHome: "${env.WORKSPACE}/conan_home".toString())

                    echo "Configure the Conan client"
                    client.run(command: "config install ${config_url}".toString())
                    client.run(command: "config install -sf hooks -tf hooks https://github.com/conan-io/hooks.git")
                    client.remote.add server: server, repo: artifactory_repo, remoteName: remoteName, force: true

                    echo "Install the reference"
                    client.run(command: "install ${params.reference} --profile ${profile}".toString())
                    client.run(command: "download ${params.project_id} -r ${remoteName}".toString())

                    // TODO: Iterate profiles (can go in parallel)
                    client.run(command: "graph lock --profile ${profile} --lockfile=${lockfile} ${params.project_id}".toString())
                    sh "cat ${lockfile}"

                    stash name: "lockfile", includes: "${lockfile}"
                }
            }
        }

        def build_order_file = "bo.json"

        stage("Compute build order") {
            docker.image("conanio/gcc8").inside("--net=docker_jenkins_artifactory") {
                unstash "lockfile"

                def server = Artifactory.server artifactory_name
                def client = Artifactory.newConanClient()
                client.run(command: "config install ${config_url}".toString())
                client.run(command: "config install -sf hooks -tf hooks https://github.com/conan-io/hooks.git")
                client.remote.add server: server, repo: artifactory_repo, remoteName: remoteName, force: true

                client.run(command: "graph build-order ${lockfile} --build missing --json ${build_order_file}".toString())
                sh "cat ${build_order_file}"

                stash name: "build_order", includes: "${build_order_file}"                
            }
        }

        stage("Iterate build order") {
            unstash "lockfile"
            unstash "build_order"

            // Iterate build-order and call nodes
            def bo = readJSON file: build_order_file
            bo.each { it_stages ->

                def stage_lockfiles = []
                def stage_jobs = [:]
                for (int i = 0; i < it_stages.size(); i++) {
                    def job_reference = it_stages[i][1]
                    def actual_reference_name = job_reference.split("/")[0]
                    
                    sh "cp ${lockfile} ${actual_reference_name}.lock"
                    stash name: actual_reference_name, includes: "${actual_reference_name}.lock"
                    
                    stage_lockfiles.add(actual_reference_name)
                    stage_jobs[actual_reference_name] = build_ref_with_lockfile(job_reference, lockfile, profile, config_url, artifactory_name, remoteName, artifactory_repo)
                }

                stage ("Compile stage") {
                    parallel stage_jobs
                }
                
                stage ("Complete lockfile") {
                    docker.image("conanio/gcc8").inside("--net=docker_jenkins_artifactory") {
                        unstash "lockfile"
                        for (int i = 0; i < stage_lockfiles.size(); i++) {
                            unstash stage_lockfiles[i]
                            sh "cat ${stage_lockfiles[i]}.lock"
                            sh "conan graph update-lock ${lockfile} ${stage_lockfiles[i]}.lock"
                            sh "cat ${lockfile}"
                        }
                        stash name: "lockfile", includes: "${lockfile}"
                        
                    }
                }

            }
            docker.image("conanio/gcc8").inside("--net=docker_jenkins_artifactory") {
                client.run(command: "config install ${config_url}".toString())
                client.run(command: "config install -sf hooks -tf hooks https://github.com/conan-io/hooks.git")

                unstash "lockfile"
                sh "cat ${lockfile}"
                echo "calculate revision"
                def search_output = "search_output.json"
                client.run(command: "search ${params.project_id} --revisions --raw --json=${search_output}")
                def props = readJSON file: "search_output.json"
                def revision = props[0]['revision']
                echo "${revision}"
                // upload conan.lock to meta
                def server = Artifactory.server artifactory_name
                def repo_path = "${params.project_id}/${revision}/${profile}/${lockfile}"
                // TODO proper credentials handling
                sh "curl -u \"\${CONAN_LOGIN_USERNAME}\":\"\${CONAN_PASSWORD}\" -X PUT \"${server.url}/meta/${repo_path}\" -T ${lockfile}"
            }
        }

        stage ("Notify success") {
            post_status("success")
        }
    }
    catch (error) {
        stage ("Notify failure") {
            post_status("error")
        }
    }
    finally {
        deleteDir() /* clean up our workspace */
    }    
}
