import groovy.json.JsonOutput

def artifactory_name = "Artifactory Docker"
def artifactory_repo = "hackathonv5-build"
def config_url = "https://github.com/demo-ci-conan/settings.git"
def remoteName = "artifactory-local"

def shell_quote(word) {
  return "'" + word.replace("'", "'\\''") + "'"
}

def build_ref_with_lockfile(job_reference, lockfile, profile, config_url, artifactory_name, remoteName, artifactory_repo) {
  node {
    docker.image("conanio/gcc8").inside("--net=host") {
      try {
        def server = Artifactory.server artifactory_name
        def client = Artifactory.newConanClient()

        client.run(command: "config install ${shell_quote(config_url)}".toString())
        client.remote.add server: server, repo: artifactory_repo, remoteName: remoteName, force: true

        def actual_reference_name = job_reference.split("/")[0]
        def recipe_reference_with_revision = job_reference.split(":")[0]
        def actual_reference = job_reference.split("#")[0]

        echo("Build ${actual_reference_name}")
        unstash 'lockfile'

        client.run(command: "install ${shell_quote(recipe_reference_with_revision)} --build ${shell_quote(actual_reference)} --lockfile conan.lock --profile ${shell_quote(profile)}".toString())
        sh("""\
mv conan.lock ${actual_reference_name}.lock
cat ${actual_reference_name}.lock
""")
        stash name: actual_reference_name, includes: "${actual_reference_name}.lock"

        echo("Upload packages")
        String uploadCommand = "upload ${shell_quote(actual_reference)} --all -r ${shell_quote(remoteName)} --confirm"
        client.run(command: uploadCommand)  // TODO: Better if we share the cache for these jobs... shouldn't have race conditions.
      }
      finally {
        deleteDir()
      }
    }
  }
}

def profile = "conanio-gcc8"
def lockfile = "conan.lock"
def build_order_file = "bo.json"
def build_order = null

pipeline {
  agent none

  parameters {
    string(name: 'reference',   )
    string(name: 'project_id',  )
    string(name: 'organization',)
    string(name: 'repository',  )
    string(name: 'sha1',        )
  }

  stages {
    stage('Build information') {
      steps {
        script {
          echo "Building project '${params.project_id}'"
          echo " - for changes in '${params.reference}'"
        }
      }
    }

    stage('Dynamic node') {
      agent any
      steps {
        script {
          docker.image("conanio/gcc8").inside("--net=host") {
            echo "Inside the docker"
            withEnv(["CONAN_USER_HOME=${env.WORKSPACE}/conan_home"]) {
              sh 'rm -rf "${CONAN_USER_HOME}"'
              echo "Create a Conan client (CONAN_USER_HOME: '${env.WORKSPACE}/conan_home')".toString()
              def server = Artifactory.server artifactory_name
              def client = Artifactory.newConanClient(userHome: "${env.WORKSPACE}/conan_home".toString())

              echo "Configure the Conan client"
              client.run(command: "config install ${shell_quote(config_url)}".toString())
              //client.run(comamnd: "config get general.revisions_enabled")
              //client.run(command: "config get general.default_package_id_mode")
              client.remote.add server: server, repo: artifactory_repo, remoteName: remoteName, force: true

              echo "Install the reference"
              httpRequest(
                  url: "${server.url}/hackathonv5-metadata/${params.project_id}/${profile}/conan.lock",
                  outputFile: lockfile,
              )
              client.run(command: "install ${shell_quote(params.project_id)} --lockfile=${shell_quote(lockfile)} --profile ${shell_quote(profile)}".toString())
              client.run(command: "install ${shell_quote(params.reference)} --update --profile ${shell_quote(profile)}".toString())

              // TODO: Iterate profiles (can go in parallel)
              client.run(command: "graph lock --profile ${shell_quote(profile)} --lockfile=${shell_quote(lockfile)} ${shell_quote(params.project_id)}".toString())
              sh "cat ${shell_quote(lockfile)}"

              stash name: 'lockfile', includes: lockfile
            }
          }
        }
      }
    }

    stage("Compute build order") {
      agent any
      steps {
        script {
          docker.image("conanio/gcc8").inside("--net=host") {
            unstash "lockfile"

            def server = Artifactory.server artifactory_name
            def client = Artifactory.newConanClient()
            client.run(command: "config install ${config_url}".toString())
            client.run(command: "config install -sf hooks -tf hooks https://github.com/conan-io/hooks.git")
            client.remote.add server: server, repo: artifactory_repo, remoteName: remoteName, force: true

            client.run(command: "graph build-order ${shell_quote(lockfile)} --build missing --json ${shell_quote(build_order_file)}".toString())
            sh "cat ${shell_quote(build_order_file)}"
            build_order = readJSON file: build_order_file
          }
        }
      }
    }

    stage("Iterate build order") {
      steps {
        script {
          // Iterate build-order and call nodes
          build_order.each { it_stages ->
            def stage_jobs = it_stages.collectEntries {
              def job_reference = it[1]
              def actual_reference_name = job_reference.split("/")[0]
              
              ["${actual_reference_name}": {
                  stage(actual_reference_name) {
                    build_ref_with_lockfile(job_reference, lockfile, profile, config_url, artifactory_name, remoteName, artifactory_repo)
                  }
                }]
            }

            parallel stage_jobs
            
            node {
              docker.image("conanio/gcc8").inside("--net=host") {
                unstash 'lockfile'

                stage_jobs.each { actual_reference_name, _ ->
                  unstash actual_reference_name
                  sh("conan graph update-lock ${shell_quote(lockfile)} ${shell_quote(actual_reference_name)}.lock")
                }

                stash name: 'lockfile', includes: lockfile
              }
            }
          }

          if (build_order.size() <= 0) {
            node {
              unstash 'lockfile'
              sh "cat ${lockfile}"
            }
          }
        }
      }
    }
  }
}
